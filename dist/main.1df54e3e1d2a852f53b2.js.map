{"version":3,"file":"main.1df54e3e1d2a852f53b2.js","mappings":"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","sources":["webpack://pomodoro/./src/app/constants.js","webpack://pomodoro/./src/app/dom.js","webpack://pomodoro/./src/app/main.js","webpack://pomodoro/./src/app/state.js"],"sourcesContent":["export const MODES = {\r\n   POMODORO: 'pomodoro',\r\n   SHORT_BREAK: 'shortBreak',\r\n   LONG_BREAK: 'longBreak',\r\n};\r\n\r\nexport const MODES_NAMES = {\r\n   [MODES.POMODORO]: 'pomodoro',\r\n   [MODES.SHORT_BREAK]: 'short break',\r\n   [MODES.LONG_BREAK]: 'long break',\r\n};\r\n\r\nexport const AVAILABLE_FONTS = {\r\n   KUMBH: 'font-kumbh',\r\n   ROBOTO: 'font-roboro',\r\n   SPACE: 'font-space',\r\n};\r\n\r\nexport const AVAILABLE_THEMES = {\r\n   CORAL: 'theme-coral',\r\n   SKY: 'theme-sky',\r\n   PURPLE: 'theme-purple',\r\n};\r\n\r\nexport const AVAILABLE_CONTROLS = {\r\n   START: 'start',\r\n   PAUSE: 'pause',\r\n   RESTART: 'restart',\r\n   RESET: 'reset',\r\n};\r\n","import {\r\n   MODES,\r\n   MODES_NAMES,\r\n   AVAILABLE_FONTS,\r\n   AVAILABLE_THEMES,\r\n   AVAILABLE_CONTROLS,\r\n} from './constants.js';\r\n\r\nexport const bindDom = (state) => {\r\n   setupListeners(state);\r\n   setupRenderers(state);\r\n   resizeClock();\r\n};\r\n\r\nconst $mainTheme = document.querySelector('#main');\r\nconst $mainFont = document.querySelector('#main-font');\r\nconst $colorList = document.querySelector('.color-list');\r\nconst $fontList = document.querySelector('.font-list');\r\nconst $logo = document.querySelector('.logo');\r\nconst $mode = document.querySelector('.mode');\r\nconst $clock = document.querySelector('.clock-time');\r\nconst $clockLine = document.querySelector('.clock-circle');\r\nconst $clockMode = document.querySelector('.clock-mode');\r\nconst $modal = document.querySelector('.modal');\r\nconst $closeModal = document.querySelector('.header-escape');\r\nconst $parentMode = document.querySelector('.mode-parent');\r\nconst $modalTiming = document.querySelector('.modal-timing');\r\nconst $settings = document.querySelector('.setting-gear');\r\nconst $applySettings = document.querySelector('.button-apply');\r\nconst $ovelay = document.querySelector('.overlay');\r\n\r\nconst setupListeners = (state) => {\r\n   window.addEventListener('resize', resizeClock);\r\n\r\n   $applySettings.addEventListener('click', () => {\r\n      confirmSettings(state);\r\n   });\r\n\r\n   $modalTiming.addEventListener('click', (event) => {\r\n      setTimings(state, event);\r\n   });\r\n\r\n   $parentMode.addEventListener('click', (event) => {\r\n      setMode(state, event);\r\n   });\r\n\r\n   $settings.addEventListener('click', () => {\r\n      showSettings(state);\r\n   });\r\n\r\n   $closeModal.addEventListener('click', () => {\r\n      closeSettings(state);\r\n   });\r\n\r\n   $fontList.addEventListener('click', (event) => {\r\n      setFont(state, event);\r\n   });\r\n\r\n   $colorList.addEventListener('click', (event) => {\r\n      setColor(state, event);\r\n   });\r\n\r\n   $clockMode.addEventListener('click', (event) => {\r\n      setClockMode(state, event);\r\n   });\r\n};\r\n\r\nconst setupRenderers = (state) => {\r\n   state.onChange(renderLogo);\r\n   state.onChange(renderModes);\r\n   state.onChange(renderTiming);\r\n   state.onChange(renderModal);\r\n   state.onChange(renderClock);\r\n   state.onChange(renderFonts);\r\n   state.onChange(renderTheme);\r\n   state.onChange(renderClockControls);\r\n};\r\n\r\nconst confirmSettings = (state) => {\r\n   state.applySettings();\r\n   state.resetTimer();\r\n};\r\n\r\nconst setTimings = (state, event) => {\r\n   const isTimeUp = event.target.classList.contains('time-up');\r\n   const isTimeDown = event.target.classList.contains('time-down');\r\n\r\n   if (!isTimeUp && !isTimeDown) {\r\n      return;\r\n   }\r\n   const modeEl = event.target.closest('[data-mode]');\r\n   const mode = modeEl.getAttribute('data-mode');\r\n   if (isTimeUp) {\r\n      state.incrementModeTime(mode);\r\n   } else {\r\n      state.decrementModeTime(mode);\r\n   }\r\n};\r\n\r\nconst setMode = (state, event) => {\r\n   if (event.target.hasAttribute('data-mode')) {\r\n      state.setCurrentMode(event.target.getAttribute('data-mode'));\r\n      state.resetTimer();\r\n   }\r\n};\r\n\r\nconst showSettings = (state) => {\r\n   state.toggleSettingsModal();\r\n};\r\n\r\nconst closeSettings = (state) => {\r\n   state.toggleSettingsModal();\r\n};\r\n\r\nconst setFont = (state, event) => {\r\n   if (event.target.hasAttribute('data-font')) {\r\n      $mainFont.classList.remove(state.current.font);\r\n      if (event.target.hasAttribute('data-font')) {\r\n         state.setCurrentFont(event.target.getAttribute('data-font'));\r\n         $mainFont.classList.add(state.current.font);\r\n      }\r\n   } else {\r\n      return;\r\n   }\r\n};\r\n\r\nconst setColor = (state, event) => {\r\n   if (event.target.hasAttribute('data-theme')) {\r\n      $mainTheme.classList.remove(state.current.theme);\r\n      if (event.target.hasAttribute('data-theme')) {\r\n         state.setCurrentTheme(event.target.getAttribute('data-theme'));\r\n         $mainTheme.classList.add(state.current.theme);\r\n      }\r\n   } else {\r\n      return;\r\n   }\r\n};\r\n\r\nconst setClockMode = (state, event) => {\r\n   const control = event.target.getAttribute('data-control');\r\n   if (control === AVAILABLE_CONTROLS.START) {\r\n      state.startTimer();\r\n   }\r\n   if (control === AVAILABLE_CONTROLS.PAUSE) {\r\n      state.stopTimer();\r\n   }\r\n   if (control === AVAILABLE_CONTROLS.RESTART) {\r\n      state.startTimer();\r\n   }\r\n   if (control === AVAILABLE_CONTROLS.RESET) {\r\n      state.resetTimer();\r\n   }\r\n};\r\n\r\nconst resizeClock = () => {\r\n   if (window.innerWidth <= 670) {\r\n      $clockLine.setAttribute('r', 120);\r\n      $clockLine.setAttribute('cy', 130);\r\n      $clockLine.setAttribute('cx', 130);\r\n   } else {\r\n      $clockLine.setAttribute('r', 180);\r\n      $clockLine.setAttribute('cy', 210);\r\n      $clockLine.setAttribute('cx', 210);\r\n   }\r\n\r\n   const circumference = calculateCircumference();\r\n\r\n   $clockLine.style.strokeDasharray = circumference;\r\n   $clockLine.style.strokeDashoffset = circumference;\r\n};\r\n\r\nconst calculateCircumference = () => {\r\n   const radius = $clockLine.r.baseVal.value;\r\n\r\n   return 2 * Math.PI * radius;\r\n};\r\n\r\nfunction renderModes(state) {\r\n   $parentMode.innerHTML = ` \r\n          <div class='mode'>\r\n          <p class='mode-pomodoro ${\r\n             state.current.mode === MODES.POMODORO ? 'active' : ''\r\n          }' data-mode=\"${MODES.POMODORO}\">${MODES_NAMES[MODES.POMODORO]}</p>\r\n          <p class='mode-short ${\r\n             state.current.mode === MODES.SHORT_BREAK ? 'active' : ''\r\n          }' data-mode=\"${MODES.SHORT_BREAK}\">${\r\n      MODES_NAMES[MODES.SHORT_BREAK]\r\n   }</p>\r\n          <p class='mode-long ${\r\n             state.current.mode === MODES.LONG_BREAK ? 'active' : ''\r\n          }' data-mode=\"${MODES.LONG_BREAK}\">${\r\n      MODES_NAMES[MODES.LONG_BREAK]\r\n   }</p>\r\n          </div>\r\n          `;\r\n}\r\n\r\nfunction renderLogo(state) {\r\n   $logo.textContent = MODES_NAMES[state.current.mode];\r\n}\r\n\r\nfunction renderTiming(state) {\r\n   $modalTiming.innerHTML = `\r\n             <div class=\"timing-modes\">\r\n \r\n \r\n                <p>${MODES_NAMES[MODES.POMODORO]}</p>\r\n                <p>${MODES_NAMES[MODES.SHORT_BREAK]}</p>\r\n                <p>${MODES_NAMES[MODES.LONG_BREAK]}</p>\r\n \r\n \r\n             </div>\r\n \r\n             <div class=\"timing-inputs\">\r\n \r\n                   <div data-mode=\"${MODES.POMODORO}\">\r\n                   <input type=\"number\" value=\"${\r\n                      state.settings.mode[MODES.POMODORO] / 60\r\n                   }\" disabled />\r\n                   \r\n                   <div class=\"timing-button\">\r\n                      <img class=\"time-up\" src=\"img/up.png\" alt=\"\" />\r\n                      <img class=\"time-down\" src=\"img/down.png\" alt=\"\" />\r\n                   </div>\r\n                   </div>\r\n \r\n                <div data-mode=\"${MODES.SHORT_BREAK}\">\r\n                   <input type=\"number\" value=\"${\r\n                      state.settings.mode[MODES.SHORT_BREAK] / 60\r\n                   }\" disabled />\r\n                      \r\n                   <div class=\"timing-button\" >\r\n                      <img class=\"time-up\" src=\"img/up.png\" alt=\"\" />\r\n                      <img class=\"time-down\" src=\"img/down.png\" alt=\"\" />\r\n                   </div> \r\n                </div>    \r\n \r\n                <div data-mode=\"${MODES.LONG_BREAK}\">\r\n                   <input type=\"number\" value=\"${\r\n                      state.settings.mode[MODES.LONG_BREAK] / 60\r\n                   }\" disabled />\r\n                   \r\n                   <div class=\"timing-button\" >\r\n                      <img class=\"time-up\" src=\"img/up.png\" alt=\"\" />\r\n                      <img class=\"time-down\" src=\"img/down.png\" alt=\"\" />\r\n                   </div> \r\n                </div>\r\n \r\n             </div>\r\n              `;\r\n}\r\n\r\nfunction renderModal(state) {\r\n   $modal.classList.toggle('show', state.isSettingModalVisible);\r\n   $ovelay.classList.toggle('show', state.isSettingModalVisible);\r\n}\r\n\r\nfunction renderClock(state) {\r\n   const timeLeft = state.selectedModeTime - state.current.elapsedTime;\r\n   $clock.textContent = `${timeLeft}:00`;\r\n   let minutes = Math.floor(timeLeft / 60);\r\n   let seconds = timeLeft % 60;\r\n   seconds = seconds < 10 ? `0${seconds}` : seconds;\r\n   $clock.textContent = `${minutes}:${seconds}`;\r\n   //\r\n   const circumference = calculateCircumference();\r\n   const elapsedTimePercent =\r\n      state.current.elapsedTime / state.selectedModeTime;\r\n   $clockLine.style.strokeDashoffset = circumference * elapsedTimePercent;\r\n}\r\n\r\nfunction renderClockControls(state) {\r\n   $clockMode.innerHTML = `\r\n    ${\r\n       state.current.elapsedTime === 0\r\n          ? `<div class=\"clock-start\" data-control=\"${AVAILABLE_CONTROLS.START}\">START</div>`\r\n          : ''\r\n    }\r\n    ${\r\n       state.current.timerId\r\n          ? `<div class=\"clock-pause\" data-control=\"${AVAILABLE_CONTROLS.PAUSE}\">PAUSE</div>`\r\n          : ''\r\n    }\r\n    ${\r\n       state.current.elapsedTime !== 0 &&\r\n       !state.current.timerId &&\r\n       state.current.elapsedTime !== state.settings.mode[state.current.mode]\r\n          ? `<div class=\"clock-restart\" data-control=\"${AVAILABLE_CONTROLS.RESTART}\">RESTART</div>`\r\n          : ''\r\n    }\r\n    ${\r\n       state.current.elapsedTime === state.settings.mode[state.current.mode]\r\n          ? `<div class=\"clock-reset\" data-control=\"${AVAILABLE_CONTROLS.RESET}\">RESET</div>`\r\n          : ''\r\n    }\r\n    `;\r\n}\r\n\r\nfunction renderFonts(state) {\r\n   $fontList.innerHTML = `\r\n     <span class=\"font-kumbh-sans ${\r\n        state.current.font === AVAILABLE_FONTS.KUMBH ? 'active-font' : ''\r\n     }\" data-font=\"${AVAILABLE_FONTS.KUMBH}\">Aa</span>\r\n    <span class=\"font-roboto-slab ${\r\n       state.current.font === AVAILABLE_FONTS.ROBOTO ? 'active-font' : ''\r\n    }\r\n    \" data-font=\"${AVAILABLE_FONTS.ROBOTO}\">Aa</span>\r\n    <span class=\"font-space-mono\r\n    ${state.current.font === AVAILABLE_FONTS.SPACE ? 'active-font' : ''}\r\n    \" data-font=\"${AVAILABLE_FONTS.SPACE}\">Aa</span>\r\n    `;\r\n}\r\n\r\nfunction renderTheme(state) {\r\n   $colorList.innerHTML = ` \r\n    <div class=\"color-coral\">\r\n    <img\r\n       class=\"color-imagen-first ${\r\n          state.current.theme === AVAILABLE_THEMES.CORAL ? 'active-theme' : ''\r\n       }\"\r\n       data-theme=\"${AVAILABLE_THEMES.CORAL}\"\r\n       src=\"img/applyColor.png\"\r\n       alt=\"\"\r\n    />\r\n </div>\r\n <div class=\"color-sky\">\r\n    <img\r\n       class=\"color-imagen-second\r\n       ${state.current.theme === AVAILABLE_THEMES.SKY ? 'active-theme' : ''}\"\r\n       data-theme=\"${AVAILABLE_THEMES.SKY}\"\r\n       src=\"img/applyColor.png\"\r\n       alt=\"\"\r\n    />\r\n </div>\r\n <div class=\"color-purple\">\r\n    <img\r\n       class=\"color-imagen-third ${\r\n          state.current.theme === AVAILABLE_THEMES.PURPLE ? 'active-theme' : ''\r\n       }\"\r\n       data-theme=\"${AVAILABLE_THEMES.PURPLE}\"\r\n       src=\"img/applyColor.png\"\r\n       alt=\"\"\r\n    />\r\n </div>\r\n    `;\r\n}\r\n","import '../styles/main.scss';\r\n\r\nimport { createState } from './state.js';\r\n\r\nimport { bindDom } from './dom.js';\r\n\r\nconst state = createState();\r\n\r\nbindDom(state);\r\n\r\nstate.changed();\r\n","import { MODES, AVAILABLE_FONTS, AVAILABLE_THEMES } from './constants.js';\r\n\r\nexport const createState = () => ({\r\n   isSettingModalVisible: false,\r\n   settings: {\r\n      mode: {\r\n         [MODES.POMODORO]: 1500,\r\n         [MODES.SHORT_BREAK]: 300,\r\n         [MODES.LONG_BREAK]: 900,\r\n      },\r\n   },\r\n\r\n   current: {\r\n      mode: MODES.POMODORO,\r\n      font: AVAILABLE_FONTS.KUMBH,\r\n      theme: AVAILABLE_THEMES.CORAL,\r\n      elapsedTime: 0,\r\n      timerId: null,\r\n   },\r\n\r\n   get selectedModeTime() {\r\n      return this.settings.mode[this.current.mode];\r\n   },\r\n\r\n   settingsBackup: null,\r\n\r\n   _listeners: [],\r\n\r\n   setCurrentMode(mode) {\r\n      this.current.mode = mode;\r\n      this.changed();\r\n   },\r\n\r\n   incrementModeTime(mode) {\r\n      this.settings.mode[mode] += 60;\r\n      this.changed();\r\n   },\r\n\r\n   decrementModeTime(mode) {\r\n      if (this.settings.mode[mode] <= 1) {\r\n         return;\r\n      }\r\n      this.settings.mode[mode] -= 60;\r\n      this.changed();\r\n   },\r\n\r\n   onChange(listener) {\r\n      this._listeners.push(listener);\r\n   },\r\n\r\n   changed() {\r\n      this._listeners.forEach((listener) => listener(this));\r\n   },\r\n\r\n   toggleSettingsModal(shouldUseBackUp = true) {\r\n      this.isSettingModalVisible = !this.isSettingModalVisible;\r\n      if (shouldUseBackUp) {\r\n         if (this.isSettingModalVisible) {\r\n            this.backupSettings();\r\n         } else {\r\n            this.applyBackup();\r\n         }\r\n      }\r\n      this.changed();\r\n   },\r\n\r\n   backupSettings() {\r\n      this.settingsBackup = structuredClone(this.settings);\r\n   },\r\n\r\n   applyBackup() {\r\n      if (this.settingsBackup) {\r\n         this.settings = this.settingsBackup;\r\n         this.clearBackup();\r\n         this.changed();\r\n      }\r\n   },\r\n\r\n   applySettings() {\r\n      this.clearBackup();\r\n      this.toggleSettingsModal(false);\r\n   },\r\n\r\n   clearBackup() {\r\n      this.settingsBackup = null;\r\n   },\r\n\r\n   setCurrentFont(mode) {\r\n      this.current.font = mode;\r\n      this.changed();\r\n   },\r\n\r\n   setCurrentTheme(mode) {\r\n      this.current.theme = mode;\r\n      this.changed();\r\n   },\r\n\r\n   startTimer() {\r\n      this.updateTimer();\r\n      this.current.timerId = setInterval(() => this.updateTimer(), 1000);\r\n      this.changed();\r\n   },\r\n\r\n   updateTimer() {\r\n      this.current.elapsedTime += 1;\r\n      if (this.current.elapsedTime === this.settings.mode[this.current.mode]) {\r\n         this.stopTimer();\r\n      }\r\n      this.changed();\r\n   },\r\n\r\n   stopTimer() {\r\n      clearInterval(this.current.timerId);\r\n      this.current.timerId = null;\r\n      this.changed();\r\n   },\r\n\r\n   resetTimer() {\r\n      this.current.elapsedTime = 0;\r\n      this.stopTimer();\r\n      this.changed();\r\n   },\r\n});\r\n"],"names":["MODES","MODES_NAMES","AVAILABLE_FONTS","AVAILABLE_THEMES","AVAILABLE_CONTROLS","$mainTheme","document","querySelector","$mainFont","$colorList","$fontList","$logo","$clock","$clockLine","$clockMode","$modal","$closeModal","$parentMode","$modalTiming","$settings","$applySettings","$ovelay","setupListeners","state","window","addEventListener","resizeClock","confirmSettings","event","setTimings","setMode","showSettings","closeSettings","setFont","setColor","setClockMode","setupRenderers","onChange","renderLogo","renderModes","renderTiming","renderModal","renderClock","renderFonts","renderTheme","renderClockControls","applySettings","resetTimer","isTimeUp","target","classList","contains","isTimeDown","mode","closest","getAttribute","incrementModeTime","decrementModeTime","hasAttribute","setCurrentMode","toggleSettingsModal","remove","current","font","setCurrentFont","add","theme","setCurrentTheme","control","startTimer","stopTimer","innerWidth","setAttribute","circumference","calculateCircumference","style","strokeDasharray","strokeDashoffset","radius","r","baseVal","value","Math","PI","innerHTML","textContent","settings","toggle","isSettingModalVisible","timeLeft","selectedModeTime","elapsedTime","minutes","floor","seconds","elapsedTimePercent","timerId","this","settingsBackup","_listeners","changed","listener","push","forEach","shouldUseBackUp","backupSettings","applyBackup","structuredClone","clearBackup","updateTimer","setInterval","clearInterval","bindDom"],"sourceRoot":""}